const {
  override,
  overrideDevServer,
  addBundleVisualizer,
  addWebpackAlias,
  addWebpackPlugin
} = require('customize-cra')
const path = require('path')
const FaviconsWebpackPlugin = require('favicons-webpack-plugin')
const WebpackPwaManifest = require('webpack-pwa-manifest')
const AppConfig = require('./AppConfig')
const { appInfo, theme, manifestInfo, favIcons } = AppConfig

const PWA_MANIFEST_CONFIG = {
  name: appInfo.appName,
  short_name: appInfo.shortName,
  description: appInfo.appDescription,
  background_color: theme.background,
  start_url: manifestInfo.startUrl,
  display: manifestInfo.display,
  crossorigin: null, // can be null, use-credentials or anonymous
  icons: manifestInfo.icons,
  ios: true
}

const FAVICON_OPTIONS = {
  // Your source logo (required)
  logo: favIcons.logo,
  // Enable caching and optionally specify the path to store cached data
  // Note: disabling caching may increase build times considerably
  cache: true,
  // Override the publicPath option usually read from webpack configuration
  // publicPath: '/static',
  // The directory to output the assets relative to the webpack output dir.
  // Relative string paths are allowed here ie '../public/static'. If this
  // option is not set, `prefix` is used.
  // outputPath: '/public/static',
  // Prefix path for generated assets
  // prefix: 'assets/',
  // Inject html links/metadata (requires html-webpack-plugin).
  // This option accepts arguments of different types:
  //  * boolean
  //    `false`: disables injection
  //    `true`: enables injection if that is not disabled in html-webpack-plugin
  //  * function
  //    any predicate that takes an instance of html-webpack-plugin and returns either
  //    `true` or `false` to control the injection of html metadata for the html files
  //    generated by this instance.
  inject: true,

  // Favicons configuration options (see below)
  favicons: {
    appName: appInfo.appName,
    appDescription: appInfo.appDescription,
    developerName: null,
    developerURL: null, // prevent retrieving from the nearest package.json
    background: theme.background,
    theme_color: theme.themeColor,
    icons: {
      coast: false,
      yandex: false
    }
  }
}

module.exports = {
  webpack: override(
    addWebpackAlias({
      src: path.resolve(__dirname, 'src/')
    }),
    addBundleVisualizer({}, true),
    addWebpackPlugin(
      new FaviconsWebpackPlugin(FAVICON_OPTIONS),
      new WebpackPwaManifest(PWA_MANIFEST_CONFIG)
    )
  ),
  devServer: overrideDevServer()
}
